from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.fsm.state import State, StatesGroup

from message_process import MessageProcess
import logging
from decouple import config

TYPE_TOKEN = 'EXTRA_TOKEN' # TOKEN
ADMINS = list(map(int, config('ADMINS').split(',')))

bot = Bot(token=config(TYPE_TOKEN), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–µ–∫—Å—Ç –≤ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö
KB_MENU = {
    "send_message": "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–∏—Å—å–º–æ", "clear": "üö´ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥",
    "info": "üìñ –û –ø—Ä–æ–µ–∫—Ç–µ", "contacts": "üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã",
    "other": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", "admin": "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
}
KB_SEND_MESSAGE = {
    "cancel": {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "command": "cancel_message"}
}
KB_OTHER_MENU = {
    "music": "üéµ –ú—É–∑—ã–∫–∞", "snake": "üêç –ò–≥—Ä–∞ –∑–º–µ–π–∫–∞", "back": "<= –ù–∞–∑–∞–¥"
}
KB_SNAKE_MENU = {
    "play": "–ò–≥—Ä–∞—Ç—å", "back": "<= –ù–∞–∑–∞–¥"
}
KB_SNAKE_PLAY = {
    "back": {"text": "<=", "command": "back"},
    "up": {"text": "‚¨ÜÔ∏è", "command": "up"},
    "down": {"text": "‚¨áÔ∏è", "command": "down"},
    "left": {"text": "‚¨ÖÔ∏è", "command": "left"},
    "right": {"text": "‚û°Ô∏è", "command": "right"},
}

message_process_util = MessageProcess()



class Form_Session(StatesGroup):
    SENDING = State()
    OTHER_MENU = State()
    MAIN_MENU = State()
    SNAKE_MENU = State()
    SNAKE_PLAY = State()

def get_readme_text():
    with open("README.md", "r", encoding="utf-8") as readme:
        info_text = readme.read().strip()

    info_text = info_text.replace("---\n", "")

    info_text = info_text.split("\n")
    info_text = list(map(lambda s: "<i>"+" ".join(s.split()[1:]).strip()+"</i>" if len(s.split()) > 0 and s.split()[0] == "#"*len(s.split()[0]) else s, info_text))
    info_text = list(map(lambda s: " ".join(list(map(lambda w: w.split("[")[0] + f'<a href="{w[w.index("(")+1:w.index(")")].strip()}">'+w[w.index("[")+1:w.index("]")].strip()+"</a>" + w.split(")")[1] if len(s.split()) > 0 and "".join(list(filter(lambda x: x in "[]()", w))) == "[]()" else w, s.split()))), info_text))
    info_text = "\n".join(info_text)

    type_tag = 0
    while info_text.find("**") != -1:
        info_text = info_text.replace("**", "<b>" if type_tag == 0 else "</b>", 1)
        type_tag = not type_tag

    contacts_text = "—Å–±–æ–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Å—å :(.\n–ê–¥–º–∏–Ω —É–∂–µ –≤—Å—ë —á–∏–Ω–∏—Ç"
    info_text_readlines = info_text.split("\n")
    for i in range(len(info_text_readlines)):
        if "–°—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã" in info_text_readlines[i]:
            contacts_text = "\n".join(info_text_readlines[i:])
            break

    return info_text, contacts_text
MESSAGE_INFO, MESSAGE_CONTACTS = get_readme_text()


async def set_commands():
    commands = [BotCommand(command='/start', description='–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                BotCommand(command='/send_message', description='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–∏—Å—å–º–æ'),
                BotCommand(command='/music', description='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∏ –∞–≤—Ç–æ—Ä–∞'),
                BotCommand(command='/info', description='–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ'),
                BotCommand(command='/contacts', description='–£–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç'),
                BotCommand(command='/clear', description='–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º'),
                BotCommand(command='/other_menu', description='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é'),
                BotCommand(command='/snake', description='–°—ã–≥—Ä–∞—Ç—å –≤ –∑–º–µ–π–∫—É')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())